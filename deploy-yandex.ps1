# –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è HSK –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Yandex Cloud
# –ê–≤—Ç–æ—Ä: HSK Team
# –í–µ—Ä—Å–∏—è: 1.0

param(
    [Parameter(Mandatory=$true)]
    [string]$RegistryId,
    
    [Parameter(Mandatory=$true)]
    [string]$TelegramBotToken,
    
    [Parameter(Mandatory=$true)]
    [string]$FrontendUrl,
    
    [string]$VmName = "hsk-backend",
    [string]$Zone = "ru-central1-a",
    [string]$Cores = "2",
    [string]$Memory = "2GB",
    [string]$DiskSize = "20GB"
)

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
$Red = "Red"
$Green = "Green"
$Yellow = "Yellow"
$Blue = "Blue"

function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

function Test-YcCommand {
    try {
        yc --version | Out-Null
        return $true
    }
    catch {
        return $false
    }
}

function Test-DockerCommand {
    try {
        docker --version | Out-Null
        return $true
    }
    catch {
        return $false
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
Write-ColorOutput "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..." $Blue

if (-not (Test-YcCommand)) {
    Write-ColorOutput "‚ùå Yandex Cloud CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —Å https://cloud.yandex.ru/docs/cli/quickstart" $Red
    exit 1
}

if (-not (Test-DockerCommand)) {
    Write-ColorOutput "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop" $Red
    exit 1
}

Write-ColorOutput "‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" $Green

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Yandex Cloud
Write-ColorOutput "üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Yandex Cloud..." $Blue
try {
    $profile = yc config profile list 2>$null
    if (-not $profile) {
        Write-ColorOutput "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å Yandex Cloud. –í—ã–ø–æ–ª–Ω–∏—Ç–µ 'yc init'" $Red
        exit 1
    }
    Write-ColorOutput "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Yandex Cloud —É—Å–ø–µ—à–Ω–∞" $Green
}
catch {
    Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Yandex Cloud" $Red
    exit 1
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Container Registry
Write-ColorOutput "üê≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Container Registry..." $Blue
try {
    yc container registry configure-docker
    Write-ColorOutput "‚úÖ Docker –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Container Registry" $Green
}
catch {
    Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Docker" $Red
    exit 1
}

# –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞
Write-ColorOutput "üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..." $Blue
$ImageTag = "cr.yandex/$RegistryId/hsk-backend:latest"

try {
    Set-Location backend
    docker build -t $ImageTag .
    Write-ColorOutput "‚úÖ Docker –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ" $Green
}
catch {
    Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ Docker –æ–±—Ä–∞–∑–∞" $Red
    exit 1
}
finally {
    Set-Location ..
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–∞ –≤ Container Registry
Write-ColorOutput "üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–∞ –≤ Container Registry..." $Blue
try {
    docker push $ImageTag
    Write-ColorOutput "‚úÖ –û–±—Ä–∞–∑ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Container Registry" $Green
}
catch {
    Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—Ä–∞–∑–∞" $Red
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è VM
Write-ColorOutput "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã..." $Blue
$VmExists = $false
try {
    $vm = yc compute instance get $VmName 2>$null
    if ($vm) {
        $VmExists = $true
        Write-ColorOutput "‚ÑπÔ∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ '$VmName' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" $Yellow
    }
}
catch {
    Write-ColorOutput "‚ÑπÔ∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ '$VmName' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è" $Yellow
}

if ($VmExists) {
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π VM
    Write-ColorOutput "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã..." $Blue
    try {
        yc compute instance update-container $VmName `
            --container-image $ImageTag `
            --container-env "NODE_ENV=production,PORT=8080,TELEGRAM_BOT_TOKEN=$TelegramBotToken,FRONTEND_URL=$FrontendUrl,API_KEY=hsk_api_key_2024,REQUIRED_CHANNELS=hsk_channel,chinese_learning,mandarin_practice" `
            --container-restart-policy always
        
        Write-ColorOutput "‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ" $Green
    }
    catch {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã" $Red
        exit 1
    }
} else {
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π VM
    Write-ColorOutput "üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã..." $Blue
    try {
        yc compute instance create `
            --name $VmName `
            --zone $Zone `
            --network-interface "subnet-name=default-$Zone,nat-ip-version=ipv4" `
            --create-boot-disk "image-folder-id=standard-images,image-family=container-optimized-image,size=$DiskSize" `
            --cores $Cores `
            --memory $Memory `
            --container-name hsk-app `
            --container-image $ImageTag `
            --container-env "NODE_ENV=production,PORT=8080,TELEGRAM_BOT_TOKEN=$TelegramBotToken,FRONTEND_URL=$FrontendUrl,API_KEY=hsk_api_key_2024,REQUIRED_CHANNELS=hsk_channel,chinese_learning,mandarin_practice" `
            --container-restart-policy always
        
        Write-ColorOutput "‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ" $Green
    }
    catch {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã" $Red
        exit 1
    }
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞
Write-ColorOutput "üåê –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã..." $Blue
try {
    $VmInfo = yc compute instance get $VmName --format json | ConvertFrom-Json
    $PublicIP = $VmInfo.network_interfaces[0].primary_v4_address.one_to_one_nat.address
    
    if ($PublicIP) {
        Write-ColorOutput "‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π IP –∞–¥—Ä–µ—Å: $PublicIP" $Green
    } else {
        Write-ColorOutput "‚ö†Ô∏è –ü—É–±–ª–∏—á–Ω—ã–π IP –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" $Yellow
    }
}
catch {
    Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ VM" $Red
}

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
Write-ColorOutput "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (30 —Å–µ–∫—É–Ω–¥)..." $Blue
Start-Sleep -Seconds 30

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
if ($PublicIP) {
    Write-ColorOutput "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..." $Blue
    try {
        $HealthUrl = "http://$PublicIP:8080/health"
        $Response = Invoke-WebRequest -Uri $HealthUrl -TimeoutSec 10
        
        if ($Response.StatusCode -eq 200) {
            Write-ColorOutput "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!" $Green
        } else {
            Write-ColorOutput "‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —Å—Ç–∞—Ç—É—Å: $($Response.StatusCode)" $Yellow
        }
    }
    catch {
        Write-ColorOutput "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –µ—â–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è." $Yellow
    }
}

# –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
Write-ColorOutput "`nüéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!" $Green
Write-ColorOutput "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏:" $Blue
Write-ColorOutput "   ‚Ä¢ –ò–º—è VM: $VmName" $Blue
Write-ColorOutput "   ‚Ä¢ –ó–æ–Ω–∞: $Zone" $Blue
Write-ColorOutput "   ‚Ä¢ –û–±—Ä–∞–∑: $ImageTag" $Blue
if ($PublicIP) {
    Write-ColorOutput "   ‚Ä¢ –ü—É–±–ª–∏—á–Ω—ã–π IP: $PublicIP" $Blue
    Write-ColorOutput "   ‚Ä¢ API URL: http://$PublicIP:8080" $Blue
    Write-ColorOutput "   ‚Ä¢ Health Check: http://$PublicIP:8080/health" $Blue
}

Write-ColorOutput "`nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:" $Yellow
Write-ColorOutput "   1. –û–±–Ω–æ–≤–∏—Ç–µ FRONTEND_URL –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞" $Yellow
Write-ColorOutput "   2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ–º–µ–Ω –∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)" $Yellow
Write-ColorOutput "   3. –û–±–Ω–æ–≤–∏—Ç–µ webhook URL –¥–ª—è Telegram –±–æ—Ç–∞" $Yellow
Write-ColorOutput "   4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" $Yellow

Write-ColorOutput "`nüîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:" $Blue
Write-ColorOutput "   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤: yc compute instance get-serial-port-output $VmName" $Blue
Write-ColorOutput "   ‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ SSH: yc compute ssh --name $VmName" $Blue
Write-ColorOutput "   ‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ VM: yc compute instance stop $VmName" $Blue
Write-ColorOutput "   ‚Ä¢ –ó–∞–ø—É—Å–∫ VM: yc compute instance start $VmName" $Blue
Write-ColorOutput "   ‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ VM: yc compute instance delete $VmName" $Blue