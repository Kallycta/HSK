/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã
 */

class SubscriptionCheck {
  constructor() {
    this.isChecking = false;
    this.hasAccess = false;
    this.requiredChannels = [];
    this.subscriptionData = null;
    
    this.init();
  }
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   */
  init() {
    this.createSubscriptionModal();
    this.bindEvents();
  }
  
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
   */
  createSubscriptionModal() {
    const modalHTML = `
      <div id="subscription-modal" class="subscription-modal hidden">
        <div class="subscription-content">
          <div class="subscription-header">
            <h2>üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫</h2>
            <p>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã</p>
          </div>
          
          <div id="subscription-status" class="subscription-status">
            <div class="loading-spinner">
              <div class="spinner"></div>
              <p>–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏...</p>
            </div>
          </div>
          
          <div id="channels-list" class="channels-list hidden"></div>
          
          <div class="subscription-actions">
            <button id="check-subscription-btn" class="btn btn-primary" onclick="window.subscriptionCheck.checkSubscriptions()">
              <span class="btn-spinner hidden"></span>
              <span class="btn-text">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</span>
            </button>
            
            <button id="open-app-btn" class="btn btn-success hidden" onclick="window.subscriptionCheck.openApp()">
              –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            </button>
          </div>

        </div>
      </div>
      <style>
        .subscription-actions {
          margin-top: 20px;
          display: flex;
          gap: 10px;
          justify-content: center;
        }
        
        .subscription-actions button {
          padding: 12px 24px;
          border: none;
          border-radius: 6px;
          font-size: 14px;
          font-weight: 500;
          cursor: pointer;
          transition: all 0.2s ease;
        }
        
        #check-subscription-btn {
          background: #007bff;
          color: white;
        }
        
        #check-subscription-btn:hover:not(:disabled) {
          background: #0056b3;
        }
        
        #check-subscription-btn:disabled {
          background: #6c757d;
          cursor: not-allowed;
        }
        
        #open-app-btn {
          background: #28a745;
          color: white;
        }
        
        #open-app-btn:hover {
          background: #1e7e34;
        }
        
        .hidden {
          display: none !important;
        }
      </style>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
  }
  
  /**
   * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
   */
  bindEvents() {
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const closeBtn = document.querySelector('.close-btn');
    if (closeBtn) {
      closeBtn.addEventListener('click', () => this.hide());
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
    const modal = document.getElementById('subscription-modal');
    if (modal) {
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          this.hide();
        }
      });
    }
    
    // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    const checkBtn = document.getElementById('check-subscription-btn');
    if (checkBtn) {
      checkBtn.addEventListener('click', () => this.checkSubscriptions());
    }
    
    // –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const openAppBtn = document.getElementById('open-app-btn');
    if (openAppBtn) {
      openAppBtn.addEventListener('click', () => this.openApp());
    }
  }
  
  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
   */
  async show() {
    const modal = document.getElementById('subscription-modal');
    if (!modal) {
      console.error('Subscription modal not found in DOM');
      return;
    }
    
    console.log('üìã Showing subscription modal');
    modal.classList.remove('hidden');
    document.body.classList.add('modal-open');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
    console.log('üìã Loading required channels...');
    await this.loadRequiredChannels();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    console.log('üìã Starting automatic subscription check...');
    await this.checkSubscriptions();
  }
  
  /**
   * –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
   */
  hide() {
    const modal = document.getElementById('subscription-modal');
    if (!modal) return;
    
    modal.classList.add('hidden');
    document.body.classList.remove('modal-open');
  }
  
  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
   */
  async loadRequiredChannels() {
    try {
      console.log('üìã Starting to load required channels...');
      this.showLoading('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤...');
      
      console.log('üìã Calling telegramApp.getRequiredChannels()...');
      const channels = await window.telegramApp.getRequiredChannels();
      console.log('üìã Received channels response:', channels);
      
      this.requiredChannels = channels.channels || [];
      console.log('üìã Set requiredChannels:', this.requiredChannels);
      
      this.renderChannelsList();
      this.hideLoading();
      
    } catch (error) {
      console.error('‚ùå Failed to load channels:', error);
      this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
    }
  }
  
  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
   */
  renderChannelsList() {
    const channelsList = document.getElementById('channels-list');
    console.log('üìã Rendering channels list:', {
      channelsList: !!channelsList,
      requiredChannels: this.requiredChannels,
      channelsCount: this.requiredChannels?.length || 0
    });
    
    if (!channelsList) {
      console.error('‚ùå channels-list element not found in DOM');
      return;
    }
    
    if (!this.requiredChannels.length) {
      console.warn('‚ö†Ô∏è No required channels to display');
      channelsList.innerHTML = '<p>–ù–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏</p>';
      return;
    }
    
    const channelsHTML = `
      <h3>üìã –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:</h3>
      <div class="channels-grid">
        ${this.requiredChannels.map(channel => `
          <div class="channel-item" data-channel="${channel.channel_username}">
                    <div class="channel-info">
                        <span class="channel-status" id="status-${channel.channel_username}">‚ùì</span>
                        <span class="channel-name">${channel.name}</span>
                        <a href="https://t.me/${channel.channel_username}" target="_blank" class="channel-link">
              –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
            </a>
          </div>
        `).join('')}
      </div>
    `;
    
    console.log('üìã Setting channels HTML:', channelsHTML.substring(0, 200) + '...');
    channelsList.innerHTML = channelsHTML;
    channelsList.classList.remove('hidden');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Å—ã–ª–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
    this.bindChannelLinks();
  }
  
  /**
   * –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å—Å—ã–ª–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
   */
  bindChannelLinks() {
    const channelLinks = document.querySelectorAll('.channel-link');
    
    channelLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const url = link.getAttribute('href');
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ Telegram Web App API
        if (window.telegramApp && window.telegramApp.openLink) {
          window.telegramApp.openLink(url);
        } else {
          window.open(url, '_blank');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        this.showChannelHint(link);
      });
    });
  }
  
  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
   */
  showChannelHint(linkElement) {
    const originalText = linkElement.textContent;
    linkElement.textContent = '‚úÖ –û—Ç–∫—Ä—ã—Ç–æ';
    linkElement.style.background = '#4CAF50';
    
    setTimeout(() => {
      linkElement.textContent = originalText;
      linkElement.style.background = '';
    }, 2000);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      this.checkSubscriptions();
    }, 3000);
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async checkSubscriptions() {
    if (this.isChecking) return;
    
    this.isChecking = true;
    this.updateCheckButton(true);
    this.showCheckingStatus('–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏...');
    
    try {
      const result = await window.telegramApp.checkSubscriptions();
      this.subscriptionData = result;
      this.hasAccess = result.hasAccess;
      
      if (result.hasAccess) {
        this.showSuccess();
      } else {
        this.showSubscriptionResults(result);
      }
      
    } catch (error) {
      console.error('Subscription check failed:', error);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
      let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
      
      if (error.message && error.message.includes('HTTP 400')) {
        errorMessage = '–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö Telegram. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.';
      } else if (error.message && error.message.includes('HTTP 503')) {
        errorMessage = '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      }
      
      this.showError(errorMessage);
    } finally {
      this.isChecking = false;
      this.updateCheckButton(false);
    }
  }
  
  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
   */
  showSubscriptionResults(result) {
    const statusDiv = document.getElementById('subscription-status');
    const channelsList = document.getElementById('channels-list');
    const openAppBtn = document.getElementById('open-app-btn');
    if (!statusDiv) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∫–∞–Ω–∞–ª–æ–≤
    this.updateChannelStatuses(result.subscriptions);
    
    const missingCount = result.missingChannels?.length || 0;
    const totalCount = result.totalChannels || 0;
    const subscribedCount = totalCount - missingCount;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–¥ —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª–æ–≤
    statusDiv.innerHTML = `
      <div class="subscription-result">
        <div class="result-icon">‚ùå</div>
        <h3>–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã</h3>
        <p>–ü–æ–¥–ø–∏—Å–∞–Ω–æ: <strong>${subscribedCount}/${totalCount}</strong> –∫–∞–Ω–∞–ª–æ–≤</p>
        ${missingCount > 0 ? `
          <div class="missing-channels">
            <p>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –µ—â–µ –Ω–∞ <strong>${missingCount}</strong> –∫–∞–Ω–∞–ª(–æ–≤):</p>
            <ul>
              ${result.missingChannels.map(channel => `
                <li>@${channel}</li>
              `).join('')}
            </ul>
          </div>
        ` : ''}
        <p class="help-text">–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É".</p>
      </div>
    `;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
    if (openAppBtn) {
      openAppBtn.classList.add('hidden');
    }
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–µ—Ç—Å—è –≤–∏–¥–∏–º—ã–º
    if (channelsList) {
      channelsList.classList.remove('hidden');
    }
  }
  
  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –∫–∞–Ω–∞–ª–æ–≤ –≤ —Å–ø–∏—Å–∫–µ
   */
  updateChannelStatuses(subscriptions) {
    if (!subscriptions) return;
    
    Object.entries(subscriptions).forEach(([channel, isSubscribed]) => {
      const statusElement = document.getElementById(`status-${channel}`);
      if (statusElement) {
        statusElement.textContent = isSubscribed ? '‚úÖ' : '‚ùå';
        statusElement.title = isSubscribed ? '–ü–æ–¥–ø–∏—Å–∞–Ω' : '–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω';
      }
    });
  }
  
  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   */
  showSuccess() {
    const statusDiv = document.getElementById('subscription-status');
    const channelsList = document.getElementById('channels-list');
    const openAppBtn = document.getElementById('open-app-btn');
    if (!statusDiv) return;
    
    statusDiv.innerHTML = `
      <div class="subscription-result success">
        <div class="result-icon">‚úÖ</div>
        <h3>–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã</h3>
        <p class="success-text">–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.</p>
      </div>
    `;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
    if (openAppBtn) {
      openAppBtn.classList.remove('hidden');
    }
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–µ—Ç—Å—è –≤–∏–¥–∏–º—ã–º
    if (channelsList) {
      channelsList.classList.remove('hidden');
    }
  }
  
  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
   */
  showLoading(message) {
    const statusDiv = document.getElementById('subscription-status');
    if (!statusDiv) return;
    
    statusDiv.innerHTML = `
      <div class="loading-spinner">
        <div class="spinner"></div>
        <p>${message}</p>
      </div>
    `;
  }
  
  /**
   * –°–∫—Ä—ã—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
   */
  hideLoading() {
    const statusDiv = document.getElementById('subscription-status');
    if (!statusDiv) return;
    
    statusDiv.innerHTML = '';
  }
  
  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ (–Ω–µ —Å–∫—Ä—ã–≤–∞—è –∫–∞–Ω–∞–ª—ã)
   */
  showCheckingStatus(message) {
    const statusDiv = document.getElementById('subscription-status');
    const channelsList = document.getElementById('channels-list');
    if (!statusDiv) return;
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏
    statusDiv.innerHTML = `
      <div class="checking-status">
        <div class="spinner"></div>
        <p>${message}</p>
      </div>
    `;
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–µ—Ç—Å—è –≤–∏–¥–∏–º—ã–º
    if (channelsList) {
      channelsList.classList.remove('hidden');
    }
  }
  
  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
   */
  showError(message) {
    const statusDiv = document.getElementById('subscription-status');
    if (!statusDiv) return;
    
    statusDiv.innerHTML = `
      <div class="subscription-result error">
        <div class="result-icon">‚ùå</div>
        <h3>–û—à–∏–±–∫–∞</h3>
        <p>${message}</p>
        <button class="small-btn" onclick="location.reload()">–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å</button>
      </div>
    `;
  }
  
  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  updateCheckButton(isChecking) {
    const checkBtn = document.getElementById('check-subscription-btn');
    if (checkBtn) {
      checkBtn.disabled = isChecking;
      checkBtn.textContent = isChecking ? '–ü—Ä–æ–≤–µ—Ä—è–µ–º...' : '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É';
    }
  }

  /**
   * –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
   */
  openApp() {
    console.log('Opening app...');
    this.hide();
    this.onAccessGranted();
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
   */
  onAccessGranted() {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞
    localStorage.setItem('subscription_access', JSON.stringify({
      hasAccess: true,
      checkedAt: new Date().toISOString(),
      userId: window.telegramApp?.getUser()?.id
    }));
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞
    window.dispatchEvent(new CustomEvent('subscriptionAccessGranted', {
      detail: this.subscriptionData
    }));
    
    console.log('‚úÖ Access granted to HSK trainer');
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
   */
  checkSavedAccess() {
    try {
      const saved = localStorage.getItem('subscription_access');
      if (!saved) return false;
      
      const data = JSON.parse(saved);
      const currentUser = window.telegramApp?.getUser();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ—Å—Ç—É–ø –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–µ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
      if (data.hasAccess && 
          data.userId === currentUser?.id && 
          new Date() - new Date(data.checkedAt) < 60 * 60 * 1000) {
        this.hasAccess = true;
        return true;
      }
      
      // –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –¥–æ—Å—Ç—É–ø
      localStorage.removeItem('subscription_access');
      return false;
      
    } catch (error) {
      console.error('Error checking saved access:', error);
      return false;
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥)
   */
  async checkAccess() {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
    if (this.checkSavedAccess()) {
      console.log('‚úÖ Using saved access');
      return true;
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    await this.show();
    return false;
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞
   */
  getAccessStatus() {
    return {
      hasAccess: this.hasAccess,
      subscriptionData: this.subscriptionData,
      requiredChannels: this.requiredChannels
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.subscriptionCheck = new SubscriptionCheck();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥—É–ª—è—Ö
export default SubscriptionCheck;