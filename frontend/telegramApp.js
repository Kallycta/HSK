/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Web App API
 */

class TelegramApp {
  constructor() {
    this.tg = window.Telegram?.WebApp;
    this.isInitialized = false;
    this.user = null;
    this.subscriptionStatus = null;
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    this.apiConfig = {
      baseUrl: window.APP_CONFIG?.API_BASE_URL || 'http://localhost:3000',
      apiKey: window.APP_CONFIG?.API_KEY || '881f8e616c8deb37a9eb7c485c3dcee306dae17656bed5b4b8783549300fcaac'
    };
    
    this.init();
  }
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
   */
  init() {
    if (!this.tg) {
      console.warn('‚ö†Ô∏è Telegram Web App SDK not available');
      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç
      this.createMockTelegram();
      return;
    }
    
    try {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      this.tg.ready();
      this.tg.expand();
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –ø–æ–¥ —Ç–µ–º—É Telegram
      this.setupTheme();
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.user = this.tg.initDataUnsafe?.user;
      
      if (this.user) {
        console.log('‚úÖ Telegram user:', this.user);
        this.isInitialized = true;
      } else {
        console.warn('‚ö†Ô∏è No user data available, creating mock user for development');
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–µ–º mock –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        this.createMockTelegram();
      }
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      this.setupEventHandlers();
      
    } catch (error) {
      console.error('‚ùå Failed to initialize Telegram Web App:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º mock –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      this.createMockTelegram();
    }
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç mock –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–Ω–µ Telegram
   */
  createMockTelegram() {
    this.tg = {
      ready: () => {},
      expand: () => {},
      close: () => {},
      initData: 'user=%7B%22id%22%3A123456789%2C%22first_name%22%3A%22Test%22%2C%22last_name%22%3A%22User%22%2C%22username%22%3A%22testuser%22%2C%22language_code%22%3A%22ru%22%7D',
      initDataUnsafe: {
        user: {
          id: 123456789,
          first_name: 'Test',
          last_name: 'User',
          username: 'testuser',
          language_code: 'ru'
        }
      },
      themeParams: {
        bg_color: '#ffffff',
        text_color: '#000000',
        hint_color: '#999999',
        link_color: '#2481cc',
        button_color: '#2481cc',
        button_text_color: '#ffffff'
      },
      MainButton: {
        text: '',
        color: '#2481cc',
        textColor: '#ffffff',
        isVisible: false,
        isActive: true,
        show: function() { this.isVisible = true; },
        hide: function() { this.isVisible = false; },
        enable: function() { this.isActive = true; },
        disable: function() { this.isActive = false; },
        setText: function(text) { this.text = text; },
        onClick: function(callback) { this.callback = callback; },
        offClick: function(callback) { delete this.callback; }
      },
      BackButton: {
        isVisible: false,
        show: function() { this.isVisible = true; },
        hide: function() { this.isVisible = false; },
        onClick: function(callback) { this.callback = callback; },
        offClick: function(callback) { delete this.callback; }
      }
    };
    
    this.user = this.tg.initDataUnsafe.user;
    this.isInitialized = true;
    console.log('üîß Mock Telegram Web App initialized for development');
  }
  
  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  setupTheme() {
    if (!this.tg.themeParams) return;
    
    const root = document.documentElement;
    const theme = this.tg.themeParams;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ Telegram –∫ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
    if (theme.bg_color) {
      root.style.setProperty('--tg-bg-color', theme.bg_color);
    }
    if (theme.text_color) {
      root.style.setProperty('--tg-text-color', theme.text_color);
    }
    if (theme.hint_color) {
      root.style.setProperty('--tg-hint-color', theme.hint_color);
    }
    if (theme.link_color) {
      root.style.setProperty('--tg-link-color', theme.link_color);
    }
    if (theme.button_color) {
      root.style.setProperty('--tg-button-color', theme.button_color);
    }
    if (theme.button_text_color) {
      root.style.setProperty('--tg-button-text-color', theme.button_text_color);
    }
  }
  
  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  setupEventHandlers() {
    if (!this.tg) return;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    if (this.tg.MainButton && this.tg.MainButton.onClick) {
      this.tg.MainButton.onClick(() => {
        console.log('Main button clicked');
      });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
    if (this.tg.BackButton && this.tg.BackButton.onClick) {
      this.tg.BackButton.onClick(() => {
        console.log('Back button clicked');
      });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if (this.tg.onEvent) {
      this.tg.onEvent('mainButtonClicked', () => {
        console.log('Main button clicked via onEvent');
      });
      
      this.tg.onEvent('backButtonClicked', () => {
        console.log('Back button clicked via onEvent');
      });
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
   */
  async checkSubscriptions() {
    if (!this.user) {
      throw new Error('User not initialized');
    }
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º initData –¥–ª—è Telegram Web App
      const initData = this.tg?.initData || '';
      
      console.log('üîç Checking subscriptions...', {
        apiUrl: `${this.apiConfig.baseUrl}/api/subscription/check`,
        hasInitData: !!initData,
        userAgent: navigator.userAgent
      });
      
      const response = await fetch(`${this.apiConfig.baseUrl}/api/subscription/check`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': this.apiConfig.apiKey
        },
        body: JSON.stringify({
          userId: this.user?.id,
          initData: initData
        })
      });
      
      if (!response.ok) {
        const errorText = await response.text().catch(() => 'Unknown error');
        console.error('‚ùå API Response Error:', {
          status: response.status,
          statusText: response.statusText,
          errorText: errorText,
          url: response.url
        });
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      this.subscriptionStatus = result;
      
      console.log('üìã Subscription check result:', result);
      return result;
      
    } catch (error) {
      console.error('‚ùå Failed to check subscriptions:', error);
      
      // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
      if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {
        console.error('üåê Network Error Details:', {
          message: 'Cannot connect to API server',
          possibleCauses: [
            'Backend server is not running',
            'CORS policy blocking request',
            'Network connectivity issues',
            'Incorrect API URL'
          ],
          currentConfig: this.apiConfig
        });
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      if (window.location.hostname === 'localhost') {
        console.warn('üîß Development mode: Using fallback subscription result');
        const fallbackResult = {
          hasAccess: false,
          missingChannels: ['rust_live_13'],
          message: 'API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)',
          error: true,
          fallback: true
        };
        this.subscriptionStatus = fallbackResult;
        return fallbackResult;
      }
      
      throw error;
    }
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
   * @returns {Promise<Object>} –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
   */
  async getRequiredChannels() {
    try {
      const response = await fetch(`${this.apiConfig.baseUrl}/api/subscription/channels`, {
        headers: {
          'x-api-key': this.apiConfig.apiKey
        }
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      console.log('üìã Required channels:', result);
      return result;
      
    } catch (error) {
      console.error('‚ùå Failed to get required channels:', error);
      throw error;
    }
  }
  
  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É Telegram
   * @param {string} text –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
   * @param {Function} callback –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è
   */
  showMainButton(text, callback) {
    if (!this.tg.MainButton) return;
    
    this.tg.MainButton.setText(text);
    this.tg.MainButton.onClick(callback);
    this.tg.MainButton.show();
  }
  
  /**
   * –°–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É Telegram
   */
  hideMainButton() {
    if (!this.tg.MainButton) return;
    
    this.tg.MainButton.hide();
  }
  
  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" Telegram
   * @param {Function} callback –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è
   */
  showBackButton(callback) {
    if (!this.tg.BackButton) return;
    
    this.tg.BackButton.onClick(callback);
    this.tg.BackButton.show();
  }
  
  /**
   * –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" Telegram
   */
  hideBackButton() {
    if (!this.tg.BackButton) return;
    
    this.tg.BackButton.hide();
  }
  
  /**
   * –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
   */
  close() {
    if (this.tg.close) {
      this.tg.close();
    }
  }
  
  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   * @param {string} message –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  showAlert(message) {
    if (this.tg.showAlert) {
      this.tg.showAlert(message);
    } else {
      alert(message);
    }
  }
  
  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
   * @param {string} message –¢–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
   * @returns {Promise<boolean>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
   */
  showConfirm(message) {
    return new Promise((resolve) => {
      if (this.tg.showConfirm) {
        this.tg.showConfirm(message, resolve);
      } else {
        resolve(confirm(message));
      }
    });
  }
  
  /**
   * –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É
   * @param {string} url URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è
   */
  openLink(url) {
    if (this.tg.openLink) {
      this.tg.openLink(url);
    } else {
      window.open(url, '_blank');
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Object|null} –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  getUser() {
    return this.user;
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
   * @returns {boolean} –°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  isReady() {
    return this.isInitialized && this.user !== null;
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫
   * @returns {Object|null} –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫
   */
  getSubscriptionStatus() {
    return this.subscriptionStatus;
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
   * @returns {boolean} –ï—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø
   */
  hasAccess() {
    return this.subscriptionStatus?.hasAccess === true;
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.telegramApp = new TelegramApp();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥—É–ª—è—Ö
export default TelegramApp;